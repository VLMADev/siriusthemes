package main

import (
    "fmt"
    "errors"
)

// === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
const ThemeName = "Sirius"
var version = 1.2

// === –°—Ç—Ä—É–∫—Ç—É—Ä–∞ ===
type User struct {
    ID       int
    Name     string
    IsActive bool
}

// === –§—É–Ω–∫—Ü–∏—è ===
func greetUser(name string) error {
    if name == "" {
        return errors.New("–∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    }
    fmt.Printf("–ü—Ä–∏–≤–µ—Ç, %s! üöÄ\n", name)
    return nil
}

func main() {
    // === –£—Å–ª–æ–≤–∏—è –∏ —Ü–∏–∫–ª—ã ===
    if version > 1.0 {
        fmt.Println("–¢–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞")
    }

    users := []User{
        {ID: 1, Name: "VLMADev", IsActive: true},
        {ID: 2, Name: "GoDev", IsActive: false},
    }

    for _, user := range users {
        if err := greetUser(user.Name); err != nil {
            fmt.Println("–û—à–∏–±–∫–∞:", err)
        }
    }

    // === –ì–æ—Ä—É—Ç–∏–Ω–∞ –∏ –∫–∞–Ω–∞–ª ===
    ch := make(chan string)
    go func() {
        ch <- "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥–æ—Ä—É—Ç–∏–Ω—ã"
    }()
    fmt.Println(<-ch)
}