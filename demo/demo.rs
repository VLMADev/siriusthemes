// === –ú–æ–¥—É–ª–∏ –∏ –∏–º–ø–æ—Ä—Ç—ã ===
mod theme {
    pub fn activate() -> bool {
        true
    }
}

// === –°—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è ===
#[derive(Debug)]
struct Theme {
    name: String,
    version: f32,
}

enum ThemeMode {
    Dark,
    Light,
}

// === –§—É–Ω–∫—Ü–∏—è ===
fn greet_user(name: &str) -> Result<(), String> {
    if name.is_empty() {
        return Err("–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ".to_string());
    }
    println!("–ü—Ä–∏–≤–µ—Ç, {}! üöÄ", name);
    Ok(())
}

fn main() {
    // === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
    let theme = Theme {
        name: String::from("Sirius"),
        version: 1.2,
    };

    let mode = ThemeMode::Dark;

    // === –£—Å–ª–æ–≤–∏—è –∏ —Ü–∏–∫–ª—ã ===
    if theme::activate() {
        println!("–¢–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞");
    }

    for i in 1..5 {
        println!("–ü–æ–ø—ã—Ç–∫–∞ {}", i);
    }

    // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ===
    match greet_user("VLMADev") {
        Ok(_) => println!("–£—Å–ø–µ—Ö"),
        Err(e) => println!("–û—à–∏–±–∫–∞: {}", e),
    }

    // === Unsafe –∫–æ–¥ ===
    unsafe {
        let ptr: *const u32 = &5;
        println!("–ó–Ω–∞—á–µ–Ω–∏–µ: {}", *ptr);
    }
}